//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2021-12-01 by the VDM++ to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 10:11:21 +0900)
//

#include "metaiv.h"
#include "CGBase.h"


vdm_IO * ObjGet_vdm_IO (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_IO() : 0);
}

vdm_MATH * ObjGet_vdm_MATH (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_MATH() : 0);
}

vdm_Capteur * ObjGet_vdm_Capteur (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_Capteur() : 0);
}

vdm_Horloge * ObjGet_vdm_Horloge (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_Horloge() : 0);
}

vdm_Contexte * ObjGet_vdm_Contexte (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_Contexte() : 0);
}

vdm_Animation * ObjGet_vdm_Animation (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_Animation() : 0);
}

vdm_Detecteur * ObjGet_vdm_Detecteur (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_Detecteur() : 0);
}

vdm_TimeStamp * ObjGet_vdm_TimeStamp (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_TimeStamp() : 0);
}

vdm_Controleur * ObjGet_vdm_Controleur (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_Controleur() : 0);
}

vdm_SystemeRTP * ObjGet_vdm_SystemeRTP (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_SystemeRTP() : 0);
}

vdm_Environnement * ObjGet_vdm_Environnement (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_Environnement() : 0);
}

vdm_CapteurDistance * ObjGet_vdm_CapteurDistance (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_CapteurDistance() : 0);
}

vdm_CapteurLatitude * ObjGet_vdm_CapteurLatitude (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_CapteurLatitude() : 0);
}

vdm_CapteurLongitude * ObjGet_vdm_CapteurLongitude (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_CapteurLongitude() : 0);
}

vdm_ControleurDispenseur * ObjGet_vdm_ControleurDispenseur (const ObjectRef &obj) {
  if (!obj.IsInitialized()) {
    CGUTIL::RunTime(L"Identifier is undefined/not initialized");
  }
  vdmBase * p = obj.GetRef();
  return (p ? (static_cast<CGBase *>(p))->Get_vdm_ControleurDispenseur() : 0);
}

