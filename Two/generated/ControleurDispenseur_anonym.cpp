//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2021-12-01 by the VDM++ to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 10:11:21 +0900)
//


#include "ControleurDispenseur_userdef.h"
#include "metaiv.h"
#include "ControleurDispenseur.h"
#include "ControleurDispenseur.h"

#if !DEF_quote_A && DECL_quote_A
#define DEF_quote_A 1

const Quote quote_A (L"A");

#endif // DEF_quote_A

#if !DEF_quote_B && DECL_quote_B
#define DEF_quote_B 1

const Quote quote_B (L"B");

#endif // DEF_quote_B

#if !DEF_quote_C && DECL_quote_C
#define DEF_quote_C 1

const Quote quote_C (L"C");

#endif // DEF_quote_C

#if !DEF_quote_NUL && DECL_quote_NUL
#define DEF_quote_NUL 1

const Quote quote_NUL (L"NUL");

#endif // DEF_quote_NUL

#if !DEF_quote_DETECTEUR && DECL_quote_DETECTEUR
#define DEF_quote_DETECTEUR 1

const Quote quote_DETECTEUR (L"DETECTEUR");

#endif // DEF_quote_DETECTEUR

#if !DEF_quote_DISPENSEUR && DECL_quote_DISPENSEUR
#define DEF_quote_DISPENSEUR 1

const Quote quote_DISPENSEUR (L"DISPENSEUR");

#endif // DEF_quote_DISPENSEUR

#if !DEF_quote_CAPTEUR_DISTANCE && DECL_quote_CAPTEUR_DISTANCE
#define DEF_quote_CAPTEUR_DISTANCE 1

const Quote quote_CAPTEUR_DISTANCE (L"CAPTEUR_DISTANCE");

#endif // DEF_quote_CAPTEUR_DISTANCE

#if !DEF_quote_CAPTEUR_LATITUDE && DECL_quote_CAPTEUR_LATITUDE
#define DEF_quote_CAPTEUR_LATITUDE 1

const Quote quote_CAPTEUR_LATITUDE (L"CAPTEUR_LATITUDE");

#endif // DEF_quote_CAPTEUR_LATITUDE

#if !DEF_quote_CAPTEUR_LONGITUDE && DECL_quote_CAPTEUR_LONGITUDE
#define DEF_quote_CAPTEUR_LONGITUDE 1

const Quote quote_CAPTEUR_LONGITUDE (L"CAPTEUR_LONGITUDE");

#endif // DEF_quote_CAPTEUR_LONGITUDE

#if !DEF_quote_CONTROLEUR_DISPENSEUR && DECL_quote_CONTROLEUR_DISPENSEUR
#define DEF_quote_CONTROLEUR_DISPENSEUR 1

const Quote quote_CONTROLEUR_DISPENSEUR (L"CONTROLEUR_DISPENSEUR");

#endif // DEF_quote_CONTROLEUR_DISPENSEUR

#if !DEF_type_iU2P && DECL_type_iU2P
#define DEF_type_iU2P 1

type_iU2P &type_iU2P::Init (const Int &p1, const Generic &p2) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  return * this;
}

Int type_iU2P::get_1 () const {
  return this->GetInt(1);
}

void type_iU2P::set_1 (const Int &p) {
  this->SetField(1, p);
}

Generic type_iU2P::get_2 () const {
  return this->GetField(2);
}

void type_iU2P::set_2 (const Generic &p) {
  this->SetField(2, p);
}

#endif // DEF_type_iU2P

#if !DEF_type_iii3P && DECL_type_iii3P
#define DEF_type_iii3P 1

type_iii3P &type_iii3P::Init (const Int &p1, const Int &p2, const Int &p3) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  this->SetField(3, p3);
  return * this;
}

Int type_iii3P::get_1 () const {
  return this->GetInt(1);
}

void type_iii3P::set_1 (const Int &p) {
  this->SetField(1, p);
}

Int type_iii3P::get_2 () const {
  return this->GetInt(2);
}

void type_iii3P::set_2 (const Int &p) {
  this->SetField(2, p);
}

Int type_iii3P::get_3 () const {
  return this->GetInt(3);
}

void type_iii3P::set_3 (const Int &p) {
  this->SetField(3, p);
}

#endif // DEF_type_iii3P

#if !DEF_type_iU2Piii3P2P && DECL_type_iU2Piii3P2P
#define DEF_type_iU2Piii3P2P 1

type_iU2Piii3P2P &type_iU2Piii3P2P::Init (const type_iU2P &p1, const type_iii3P &p2) {
  this->SetField(1, p1);
  this->SetField(2, p2);
  return * this;
}

type_iU2P type_iU2Piii3P2P::get_1 () const {
  return this->GetTuple(1);
}

void type_iU2Piii3P2P::set_1 (const type_iU2P &p) {
  this->SetField(1, p);
}

type_iii3P type_iU2Piii3P2P::get_2 () const {
  return this->GetTuple(2);
}

void type_iU2Piii3P2P::set_2 (const type_iii3P &p) {
  this->SetField(2, p);
}

#endif // DEF_type_iU2Piii3P2P


