//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2021-12-01 by the VDM++ to C++ Code Generator
// (v9.0.7 - Sat 09-Jun-2018 10:11:21 +0900)
//
#ifndef _ControleurDispenseur_anonym_h
#define _ControleurDispenseur_anonym_h


#include "ControleurDispenseur_userdef.h"
#include "metaiv.h"

extern const Quote quote_A;

extern const Quote quote_B;

extern const Quote quote_C;

extern const Quote quote_NUL;

extern const Quote quote_DETECTEUR;

extern const Quote quote_DISPENSEUR;

extern const Quote quote_CAPTEUR_DISTANCE;

extern const Quote quote_CAPTEUR_LATITUDE;

extern const Quote quote_CAPTEUR_LONGITUDE;

extern const Quote quote_CONTROLEUR_DISPENSEUR;

class type_ref_ControleurDispenseur;
class type_iU2P;
class type_iii3P;
class type_iU2Piii3P2P;
#ifndef TAG_quote_A
#define TAG_quote_A (TAG_ControleurDispenseur + 1)
#endif // TAG_quote_A

#ifndef TAG_quote_B
#define TAG_quote_B (TAG_ControleurDispenseur + 2)
#endif // TAG_quote_B

#ifndef TAG_quote_C
#define TAG_quote_C (TAG_ControleurDispenseur + 3)
#endif // TAG_quote_C

#ifndef TAG_quote_NUL
#define TAG_quote_NUL (TAG_ControleurDispenseur + 4)
#endif // TAG_quote_NUL

#ifndef TAG_quote_DETECTEUR
#define TAG_quote_DETECTEUR (TAG_ControleurDispenseur + 5)
#endif // TAG_quote_DETECTEUR

#ifndef TAG_quote_DISPENSEUR
#define TAG_quote_DISPENSEUR (TAG_ControleurDispenseur + 6)
#endif // TAG_quote_DISPENSEUR

#ifndef TAG_quote_CAPTEUR_DISTANCE
#define TAG_quote_CAPTEUR_DISTANCE (TAG_ControleurDispenseur + 7)
#endif // TAG_quote_CAPTEUR_DISTANCE

#ifndef TAG_quote_CAPTEUR_LATITUDE
#define TAG_quote_CAPTEUR_LATITUDE (TAG_ControleurDispenseur + 8)
#endif // TAG_quote_CAPTEUR_LATITUDE

#ifndef TAG_quote_CAPTEUR_LONGITUDE
#define TAG_quote_CAPTEUR_LONGITUDE (TAG_ControleurDispenseur + 9)
#endif // TAG_quote_CAPTEUR_LONGITUDE

#ifndef TAG_quote_CONTROLEUR_DISPENSEUR
#define TAG_quote_CONTROLEUR_DISPENSEUR (TAG_ControleurDispenseur + 10)
#endif // TAG_quote_CONTROLEUR_DISPENSEUR

#ifndef TAG_type_ref_ControleurDispenseur
#define TAG_type_ref_ControleurDispenseur (TAG_ControleurDispenseur + 11)
#endif // TAG_type_ref_ControleurDispenseur

#ifndef DECL_type_iU2P
#define DECL_type_iU2P 1


class type_iU2P : public Tuple {
public:
  type_iU2P () : Tuple(2) {}

  type_iU2P &Init (const Int &p1, const Generic &p2);
  type_iU2P (const Common &c) : Tuple(c) {}

  const wchar_t * GetTypeName () const   {
    return L"type_iU2P";
  }

  Int get_1 () const;
  void set_1 (const Int &p);
  Generic get_2 () const;
  void set_2 (const Generic &p);
};

#endif // DECL_type_iU2P

#ifndef DECL_type_iii3P
#define DECL_type_iii3P 1


class type_iii3P : public Tuple {
public:
  type_iii3P () : Tuple(3) {}

  type_iii3P &Init (const Int &p1, const Int &p2, const Int &p3);
  type_iii3P (const Common &c) : Tuple(c) {}

  const wchar_t * GetTypeName () const   {
    return L"type_iii3P";
  }

  Int get_1 () const;
  void set_1 (const Int &p);
  Int get_2 () const;
  void set_2 (const Int &p);
  Int get_3 () const;
  void set_3 (const Int &p);
};

#endif // DECL_type_iii3P

#ifndef DECL_type_iU2Piii3P2P
#define DECL_type_iU2Piii3P2P 1


class type_iU2Piii3P2P : public Tuple {
public:
  type_iU2Piii3P2P () : Tuple(2) {}

  type_iU2Piii3P2P &Init (const type_iU2P &p1, const type_iii3P &p2);
  type_iU2Piii3P2P (const Common &c) : Tuple(c) {}

  const wchar_t * GetTypeName () const   {
    return L"type_iU2Piii3P2P";
  }

  type_iU2P get_1 () const;
  void set_1 (const type_iU2P &p);
  type_iii3P get_2 () const;
  void set_2 (const type_iii3P &p);
};

#endif // DECL_type_iU2Piii3P2P



#endif // _ControleurDispenseur_anonym_h
