class Environnement

types
-- chaque donnée d'entrée: bool 
public data    = nat * bool * Controleur`typeMenace * nat * int * int * int 


instance variables
protected periode : nat1 := 1;
protected estPeriodique : bool := true;

private io       : IO := new IO();
private datas     : seq of data := [];
private DureeSimulation :nat := 0;

private fini :bool := false;


operations


--permet de saisir la séquence de  données renvoyées par les capteurs (simulateur)  et la durée totale de la simulation
public Environnement: seq of char *nat1 * bool ==> Environnement
  Environnement(fichierData,p,estP) ==
   (periode := p;
    estPeriodique := estP;
    let mk_ (-,mk_(t,input)) = io.freadval[nat * seq of data](fichierData) -- lecture des données  à partir d'un fichier "fichierData" 
    in
     (datas := input;            -- chargement de la séquence des données lues dans la liste "Datas"
      DureeSimulation := t;      -- durée de simulation prévue
     );
      
   --MonSysteme := new SystemeRTP();

   );


public estFini: () ==> ()
estFini() ==
  skip;
  
public Finir: () ==> ()
Finir
() ==
  fini:= true;


--stimuli :   environnement ---> système de régulation (pilote)
private stimuli: () ==> ()
stimuli() ==
 (if len datas > 0
  then (dcl dateActuelle : nat := Animation`horloge.GetTime();
  let mk_(date,Ndetect , Me , id , dis , lon , lat) = hd datas 
  in
   (if date <= dateActuelle
    then (
		
		  SystemeRTP`leContexte.Setdis({id|->dis});
		  SystemeRTP`leContexte.Setlon({id|->lon});
      SystemeRTP`leContexte.Setlat({id|->lat});    
      SystemeRTP`leContexte.SetNouvelleMenace(Ndetect);
		  SystemeRTP`leContexte.SetTypeMenace(Me);
		  datas := tl datas;
          return
         );
         );
  )
  else (fini := true;
        return
       );
 );
protected Action: () ==> ()
Action() ==
 (if Animation`horloge.GetTime() < DureeSimulation
  then stimuli()   
  else fini := true;     
 );


thread
 (
  while Animation`horloge.GetTime() < DureeSimulation 
  do
   (if not fini
    then stimuli() ;		
    Animation`horloge.WaitRelatif(1);
   );
  fini := true;
 )
sync
 per estFini => fini;


end Environnement